name: Terraform Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.7'
  AWS_REGION: 'us-west-2'
  TF_WORKING_DIR: 'infrastructure/terraform/environments/production'

jobs:
  terraform-check:
    name: Terraform Validation and Plan
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: infrastructure/terraform
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init -backend=true
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write
      contents: read
    
    environment:
      name: production
      url: https://austacare.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: terraform init -backend=true
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Output
        id: output
        run: |
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Update EKS kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.output.outputs.eks_cluster_name }}
      
      - name: Verify EKS cluster
        run: |
          kubectl get nodes
          kubectl get namespaces
  
  terraform-drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      id-token: write
      contents: read
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: terraform init -backend=true
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Detect Drift
        id: drift
        run: |
          terraform plan -detailed-exitcode -no-color > plan_output.txt 2>&1
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "drift=false" >> $GITHUB_OUTPUT
            echo "No drift detected"
          elif [ $exit_code -eq 2 ]; then
            echo "drift=true" >> $GITHUB_OUTPUT
            echo "Drift detected!"
            cat plan_output.txt
          else
            echo "Error running terraform plan"
            cat plan_output.txt
            exit 1
          fi
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true
      
      - name: Create Issue for Drift
        if: steps.drift.outputs.drift == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('${{ env.TF_WORKING_DIR }}/plan_output.txt', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Infrastructure Drift Detected',
              body: `Infrastructure drift has been detected in the production environment.
              
              <details><summary>Terraform Plan Output</summary>
              
              \`\`\`
              ${planOutput}
              \`\`\`
              
              </details>
              
              Please review and apply the necessary changes.`,
              labels: ['infrastructure', 'drift', 'production']
            })