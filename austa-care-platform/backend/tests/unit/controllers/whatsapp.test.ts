import request from 'supertest';
import express from 'express';
import { whatsappRoutes } from '@/controllers/whatsapp';
import { logger } from '@/utils/logger';

const app = express();
app.use(express.json());
app.use('/whatsapp', whatsappRoutes);

// Mock logger
jest.mock('@/utils/logger', () => ({
  logger: {
    info: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn(),
  },
}));

describe('WhatsApp Controller', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('GET /whatsapp/webhook', () => {
    it('should verify webhook with correct parameters', async () => {
      const verifyToken = 'test_verify_token';
      const challenge = 'test_challenge';
      
      const response = await request(app)
        .get('/whatsapp/webhook')
        .query({
          'hub.mode': 'subscribe',
          'hub.verify_token': verifyToken,
          'hub.challenge': challenge,
        });

      expect(response.status).toBe(200);
      expect(response.text).toBe(challenge);
      expect(logger.info).toHaveBeenCalledWith(\n        'WhatsApp webhook verification',\n        { mode: 'subscribe', token: verifyToken }\n      );\n    });\n\n    it('should reject webhook verification for non-subscribe mode', async () => {\n      const response = await request(app)\n        .get('/whatsapp/webhook')\n        .query({\n          'hub.mode': 'unsubscribe',\n          'hub.verify_token': 'test_token',\n          'hub.challenge': 'test_challenge',\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.text).toBe('Forbidden');\n    });\n\n    it('should handle webhook verification errors', async () => {\n      // Mock an error in the verification process\n      jest.spyOn(logger, 'info').mockImplementation(() => {\n        throw new Error('Test error');\n      });\n\n      const response = await request(app)\n        .get('/whatsapp/webhook')\n        .query({\n          'hub.mode': 'subscribe',\n          'hub.verify_token': 'test_token',\n          'hub.challenge': 'test_challenge',\n        });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        success: false,\n        message: 'Webhook verification failed'\n      });\n      expect(logger.error).toHaveBeenCalled();\n    });\n  });\n\n  describe('POST /whatsapp/webhook', () => {\n    it('should process incoming webhook messages successfully', async () => {\n      const webhookPayload = {\n        object: 'whatsapp_business_account',\n        entry: [{\n          id: 'entry_id',\n          changes: [{\n            value: {\n              messaging_product: 'whatsapp',\n              metadata: {\n                display_phone_number: '1234567890',\n                phone_number_id: 'phone_id'\n              },\n              messages: [{\n                from: '5511999999999',\n                id: 'message_id',\n                timestamp: '1234567890',\n                text: {\n                  body: 'Hello, I need help with my appointment'\n                },\n                type: 'text'\n              }]\n            },\n            field: 'messages'\n          }]\n        }]\n      };\n\n      const response = await request(app)\n        .post('/whatsapp/webhook')\n        .send(webhookPayload);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Message received'\n      });\n      expect(logger.info).toHaveBeenCalledWith(\n        'WhatsApp webhook received',\n        { body: webhookPayload }\n      );\n    });\n\n    it('should handle webhook processing errors', async () => {\n      // Mock an error in the processing\n      jest.spyOn(logger, 'info').mockImplementation(() => {\n        throw new Error('Processing error');\n      });\n\n      const response = await request(app)\n        .post('/whatsapp/webhook')\n        .send({ test: 'data' });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        success: false,\n        message: 'Message processing failed'\n      });\n      expect(logger.error).toHaveBeenCalled();\n    });\n\n    it('should handle empty webhook payload', async () => {\n      const response = await request(app)\n        .post('/whatsapp/webhook')\n        .send({});\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Message received'\n      });\n    });\n  });\n\n  describe('POST /whatsapp/send', () => {\n    it('should send text message successfully', async () => {\n      const messageData = {\n        to: '5511999999999',\n        message: 'Hello from AUSTA Care!',\n        type: 'text'\n      };\n\n      const response = await request(app)\n        .post('/whatsapp/send')\n        .send(messageData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Message sending endpoint ready',\n        data: {\n          messageId: 'placeholder-message-id',\n          to: messageData.to,\n          status: 'sent'\n        }\n      });\n      expect(logger.info).toHaveBeenCalledWith(\n        'Sending WhatsApp message',\n        { to: messageData.to, type: messageData.type }\n      );\n    });\n\n    it('should default to text type when not specified', async () => {\n      const messageData = {\n        to: '5511999999999',\n        message: 'Hello without type!'\n      };\n\n      const response = await request(app)\n        .post('/whatsapp/send')\n        .send(messageData);\n\n      expect(response.status).toBe(200);\n      expect(logger.info).toHaveBeenCalledWith(\n        'Sending WhatsApp message',\n        { to: messageData.to, type: 'text' }\n      );\n    });\n\n    it('should handle message sending errors', async () => {\n      jest.spyOn(logger, 'info').mockImplementation(() => {\n        throw new Error('Sending error');\n      });\n\n      const response = await request(app)\n        .post('/whatsapp/send')\n        .send({ to: '5511999999999', message: 'Test' });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        success: false,\n        message: 'Message sending failed'\n      });\n      expect(logger.error).toHaveBeenCalled();\n    });\n  });\n\n  describe('POST /whatsapp/send-template', () => {\n    it('should send template message successfully', async () => {\n      const templateData = {\n        to: '5511999999999',\n        template: 'appointment_reminder',\n        language: 'pt_BR',\n        parameters: ['JoÃ£o', '2024-01-15', '14:00']\n      };\n\n      const response = await request(app)\n        .post('/whatsapp/send-template')\n        .send(templateData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Template message sending endpoint ready',\n        data: {\n          messageId: 'placeholder-template-message-id',\n          to: templateData.to,\n          template: templateData.template,\n          status: 'sent'\n        }\n      });\n      expect(logger.info).toHaveBeenCalledWith(\n        'Sending WhatsApp template message',\n        {\n          to: templateData.to,\n          template: templateData.template,\n          language: templateData.language\n        }\n      );\n    });\n\n    it('should use default language and parameters', async () => {\n      const templateData = {\n        to: '5511999999999',\n        template: 'welcome_message'\n      };\n\n      const response = await request(app)\n        .post('/whatsapp/send-template')\n        .send(templateData);\n\n      expect(response.status).toBe(200);\n      expect(logger.info).toHaveBeenCalledWith(\n        'Sending WhatsApp template message',\n        {\n          to: templateData.to,\n          template: templateData.template,\n          language: 'pt_BR'\n        }\n      );\n    });\n\n    it('should handle template sending errors', async () => {\n      jest.spyOn(logger, 'info').mockImplementation(() => {\n        throw new Error('Template sending error');\n      });\n\n      const response = await request(app)\n        .post('/whatsapp/send-template')\n        .send({ to: '5511999999999', template: 'test_template' });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        success: false,\n        message: 'Template message sending failed'\n      });\n      expect(logger.error).toHaveBeenCalled();\n    });\n  });\n});