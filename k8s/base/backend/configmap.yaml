# Backend Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: austa-backend-config
  namespace: austa-care
  labels:
    app: austa-backend
data:
  app.config.json: |
    {
      "server": {
        "host": "0.0.0.0",
        "port": 3000,
        "keepAliveTimeout": 65000,
        "headersTimeout": 66000,
        "requestTimeout": 30000,
        "bodyParser": {
          "limit": "10mb"
        }
      },
      "cors": {
        "origin": ["https://app.austacare.com", "https://admin.austacare.com"],
        "credentials": true,
        "maxAge": 86400
      },
      "rateLimit": {
        "windowMs": 900000,
        "max": 100,
        "standardHeaders": true,
        "legacyHeaders": false
      },
      "security": {
        "helmet": {
          "contentSecurityPolicy": {
            "directives": {
              "defaultSrc": ["'self'"],
              "styleSrc": ["'self'", "'unsafe-inline'"],
              "scriptSrc": ["'self'"],
              "imgSrc": ["'self'", "data:", "https:"],
              "connectSrc": ["'self'", "https://api.austacare.com"]
            }
          },
          "hsts": {
            "maxAge": 31536000,
            "includeSubDomains": true,
            "preload": true
          }
        }
      },
      "logging": {
        "level": "info",
        "format": "json",
        "prettyPrint": false
      },
      "monitoring": {
        "metrics": {
          "enabled": true,
          "port": 9090,
          "path": "/metrics"
        },
        "tracing": {
          "enabled": true,
          "serviceName": "austa-backend-api",
          "jaegerEndpoint": "http://jaeger-collector.istio-system:14268/api/traces"
        }
      },
      "cache": {
        "ttl": 3600,
        "checkPeriod": 600,
        "maxKeys": 10000
      },
      "whatsapp": {
        "webhookPath": "/webhook/whatsapp",
        "verifyToken": "${WHATSAPP_VERIFY_TOKEN}",
        "timeout": 10000,
        "retries": 3
      }
    }
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript 
                   application/json application/javascript application/xml+rss 
                   application/rss+xml application/atom+xml image/svg+xml;
        
        upstream backend {
            least_conn;
            server austa-backend-api:80 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        server {
            listen 8080;
            server_name _;
            
            location / {
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
            }
        }
    }