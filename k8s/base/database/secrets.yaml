# Database and Redis Secrets (to be created from AWS Secrets Manager)
apiVersion: v1
kind: Secret
metadata:
  name: austa-database-secret
  namespace: austa-care
  labels:
    app: austa-database
  annotations:
    # This will be synced from AWS Secrets Manager using External Secrets Operator
    external-secrets.io/secret-store: aws-secrets-manager
type: Opaque
stringData:
  connection-string: "postgresql://username:password@austa-postgres-rds:5432/austacare?sslmode=require"
---
apiVersion: v1
kind: Secret
metadata:
  name: austa-redis-secret
  namespace: austa-care
  labels:
    app: austa-cache
  annotations:
    external-secrets.io/secret-store: aws-secrets-manager
type: Opaque
stringData:
  connection-string: "redis://austa-redis-elasticache:6379/0"
---
# External Secrets Operator Configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: austa-care
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-operator
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: austa-database-external-secret
  namespace: austa-care
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: austa-database-secret
    creationPolicy: Owner
  data:
  - secretKey: connection-string
    remoteRef:
      key: /austa/production/database/postgres
      property: connectionString
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: austa-redis-external-secret
  namespace: austa-care
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: austa-redis-secret
    creationPolicy: Owner
  data:
  - secretKey: connection-string
    remoteRef:
      key: /austa/production/cache/redis
      property: connectionString